#!/bin/bash
#
# Copyright (C) 2014 Wenva <lvyexuwenfa100@126.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

spushd() {
     pushd "$1" 2>&1> /dev/null
}

spopd() {
     popd 2>&1> /dev/null
}

info() {
     local green="\033[1;32m"
     local normal="\033[0m"
     echo -e "[${green}INFO${normal}] $1"
}

cmdcheck() {
    command -v $1>/dev/null 2>&1 || { error >&2 "Please install command $1 first."; exit 1; }   
}

error() {
     local red="\033[1;31m"
     local normal="\033[0m"
     echo -e "[${red}ERROR${normal}] $1"
}

curdir() {
    if [ ${0:0:1} = '/' ] || [ ${0:0:1} = '~' ]; then
        echo "$(dirname $0)"
    elif [ -L $0 ];then
        name=`readlink $0`
        echo $(dirname $name)
    else
        echo "`pwd`/$(dirname $0)"
    fi
}

myos() {
    echo `uname|tr "[:upper:]" "[:lower:]"`
}

#########################################
###           GROBLE DEFINE           ###
#########################################

VERSION=1.1.1
AUTHOR=smallmuou

#########################################
###             ARG PARSER            ###
#########################################

usage() {

prog=`basename $0`

cat << EOF
$prog version $VERSION by $AUTHOR

USAGE: $prog [OPTIONS] url

DESCRIPTION:
    This tool is used to download tracks under ximalaya.com. The following three type urls are supported.
   
    1. https://www.ximalaya.com/ertong/12891461/ 
        it will download all tracks in album 12891461.
    2. https://www.ximalaya.com/ertong/12891461/p2/
        it will download the tracks in page 2.
    3. https://www.ximalaya.com/ertong/12891461/211393643
        it only download one track.

OPTIONS:
    -h      Show this help message and exit.
    -o      Assign output directory, if not assign, it will download to current directory.

EXAMPLES:
    $prog https://www.ximalaya.com/ertong/12891461/ 
    $prog https://www.ximalaya.com/ertong/12891461/p2/
    $prog https://www.ximalaya.com/ertong/12891461/211393643
    $prog -o ~/Downloads https://www.ximalaya.com/ertong/12891461/

EOF
exit 1
}

# output set current directory
dst_dir=.

while getopts 'o:h' arg; do
    case $arg in
        h)
            usage
            ;;
        o)
           dst_dir=$OPTARG 
            ;;
        ?)
            usage
            ;;
    esac
done

shift $(($OPTIND - 1))

[ ! -d $dst_dir ] && { error "The output directory $dst_dir does not exist."; exit -1; }

#########################################
###            MAIN ENTRY             ###
#########################################

[ $# -ne 1 ] && usage

url=$1

# params: jsonobject key
decode_json() {

statement=`cat << EOF
import json,sys
reload(sys)
sys.setdefaultencoding("utf8")
try:
    print(json.dumps(json.load(sys.stdin)[sys.argv[1]],ensure_ascii=False))
except KeyError as e:
    print('')
EOF`

    echo `cat|python -c "$statement" "$1"`
}

fetch_track_by_id() {
    result=`curl -s "http://mobile.ximalaya.com/v1/track/baseInfo?device=iPhone&trackId=$1"|grep title`
    if [ -n "$result" ];then
        uid=`echo $result|decode_json uid|sed 's/\"//g'`
        title=`echo $result|decode_json title|sed 's/\"//g'`
        url64=`echo $result|decode_json playUrl64|sed 's/\"//g'|sed 's/\\\//g'`

        if [ -n "$url64" ];then
            title=`echo $title|sed 's/\.//g'|sed 's/\///g'`
            wget "$url64" -O "$dst_dir/$title.mp3"
        else
            error "Failed to fetch the track, may be a paid resource."
        fi
    else
        error "The trackId $1 does not exist."
    fi
}

# param: album_id page
fetch_track_ids_by_page() {
    local album_id=$1
    local page=$2
    local content=`curl -s "http://180.153.255.6/mobile/v1/album/track/ts-1534855383505?albumId=$album_id&device=android&isAsc=true&isQueryInvitationBrand=true&pageId=$page&pageSize=$page_size&pre_page=0"`

statement=`cat << EOF
import json,sys
items = json.loads(sys.argv[1])['data']['list']
for item in items:
    print(item['trackId'])

EOF`

    echo `python -c "$statement" "$content"`
}

# parse url to get albumId and trackId
url=`echo $1|sed -n '/^http/p'`
if [ -z "$url" ];then
    error 'The url incorrect, please check it'
    exit -1
fi
url=`echo $1|sed 's/\/$//p'`

id1=`echo $url|awk -F/ '{print $NF}'`
id2=`echo $url|awk -F/ '{print $(NF-1)}'`
id1_is_digital=`echo $id1|sed 's/[0-9]//g'`
id2_is_digital=`echo $id2|sed 's/[0-9]//g'`
album_id=''
track_id=''
page=`echo $id1|sed -n '/^p/s/^p//p'`
page_is_digital=`echo $page|sed 's/[0-9]//g'`
page_size=30

if [ -z "$id1_is_digital" ];then
    if [ -z "$id2_is_digital" ];then
        track_id=$id1
        album_id=$id2
    else
        album_id=$id1
    fi
elif [ -z "$page_is_digital" ];then
    album_id=$id2
else
    error 'The url incorrect, please check it'
    exit -1
fi

track_ids=''

if [ -n "$track_id" ];then
    track_ids=$track_id
elif [ -n "$page" ];then
    track_ids=`fetch_track_ids_by_page $album_id $page`
else
    content=`curl -s http://180.153.255.6/mobile/v1/album/track/ts-1534855383505?albumId=$album_id&device=android&isAsc=true&isQueryInvitationBrand=true&pageId=1&pageSize=$page_size&pre_page=0`

statement=`cat << EOF
import json,sys
print(json.loads(sys.argv[1])['data']['maxPageId'])
EOF`

    page_count=`python -c "$statement" "$content"`
    for p in `seq 1 $page_count`
    do
        info "Parse page $p/$page_count ..."
        #fetch_track_ids_by_page $album_id $p
        track_ids="$track_ids `fetch_track_ids_by_page $album_id $p`"        
    done
fi

count=`echo $track_ids|wc -w|sed 's/ //g'`
i=1
for id in $track_ids
do
    info "Fetch track $i/$count ..."
    fetch_track_by_id $id
    i=`expr $i + 1`
done

